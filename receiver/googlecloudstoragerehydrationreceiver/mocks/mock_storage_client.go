// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	googlecloudstoragerehydrationreceiver "github.com/observiq/bindplane-otel-collector/receiver/googlecloudstoragerehydrationreceiver"
	mock "github.com/stretchr/testify/mock"
)

// MockStorageClient is an autogenerated mock type for the StorageClient type
type MockStorageClient struct {
	mock.Mock
}

type MockStorageClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageClient) EXPECT() *MockStorageClient_Expecter {
	return &MockStorageClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockStorageClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorageClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStorageClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStorageClient_Expecter) Close() *MockStorageClient_Close_Call {
	return &MockStorageClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStorageClient_Close_Call) Run(run func()) *MockStorageClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorageClient_Close_Call) Return(_a0 error) *MockStorageClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageClient_Close_Call) RunAndReturn(run func() error) *MockStorageClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObject provides a mock function with given fields: ctx, name
func (_m *MockStorageClient) DeleteObject(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorageClient_DeleteObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObject'
type MockStorageClient_DeleteObject_Call struct {
	*mock.Call
}

// DeleteObject is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockStorageClient_Expecter) DeleteObject(ctx interface{}, name interface{}) *MockStorageClient_DeleteObject_Call {
	return &MockStorageClient_DeleteObject_Call{Call: _e.mock.On("DeleteObject", ctx, name)}
}

func (_c *MockStorageClient_DeleteObject_Call) Run(run func(ctx context.Context, name string)) *MockStorageClient_DeleteObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorageClient_DeleteObject_Call) Return(_a0 error) *MockStorageClient_DeleteObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageClient_DeleteObject_Call) RunAndReturn(run func(context.Context, string) error) *MockStorageClient_DeleteObject_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadObject provides a mock function with given fields: ctx, name, buf
func (_m *MockStorageClient) DownloadObject(ctx context.Context, name string, buf []byte) (int64, error) {
	ret := _m.Called(ctx, name, buf)

	if len(ret) == 0 {
		panic("no return value specified for DownloadObject")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (int64, error)); ok {
		return rf(ctx, name, buf)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) int64); ok {
		r0 = rf(ctx, name, buf)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, name, buf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageClient_DownloadObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadObject'
type MockStorageClient_DownloadObject_Call struct {
	*mock.Call
}

// DownloadObject is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - buf []byte
func (_e *MockStorageClient_Expecter) DownloadObject(ctx interface{}, name interface{}, buf interface{}) *MockStorageClient_DownloadObject_Call {
	return &MockStorageClient_DownloadObject_Call{Call: _e.mock.On("DownloadObject", ctx, name, buf)}
}

func (_c *MockStorageClient_DownloadObject_Call) Run(run func(ctx context.Context, name string, buf []byte)) *MockStorageClient_DownloadObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockStorageClient_DownloadObject_Call) Return(_a0 int64, _a1 error) *MockStorageClient_DownloadObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageClient_DownloadObject_Call) RunAndReturn(run func(context.Context, string, []byte) (int64, error)) *MockStorageClient_DownloadObject_Call {
	_c.Call.Return(run)
	return _c
}

// StreamObjects provides a mock function with given fields: ctx, errChan, objectChan, doneChan
func (_m *MockStorageClient) StreamObjects(ctx context.Context, errChan chan error, objectChan chan []*googlecloudstoragerehydrationreceiver.ObjectInfo, doneChan chan struct{}) {
	_m.Called(ctx, errChan, objectChan, doneChan)
}

// MockStorageClient_StreamObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamObjects'
type MockStorageClient_StreamObjects_Call struct {
	*mock.Call
}

// StreamObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - errChan chan error
//   - objectChan chan []*googlecloudstoragerehydrationreceiver.ObjectInfo
//   - doneChan chan struct{}
func (_e *MockStorageClient_Expecter) StreamObjects(ctx interface{}, errChan interface{}, objectChan interface{}, doneChan interface{}) *MockStorageClient_StreamObjects_Call {
	return &MockStorageClient_StreamObjects_Call{Call: _e.mock.On("StreamObjects", ctx, errChan, objectChan, doneChan)}
}

func (_c *MockStorageClient_StreamObjects_Call) Run(run func(ctx context.Context, errChan chan error, objectChan chan []*googlecloudstoragerehydrationreceiver.ObjectInfo, doneChan chan struct{})) *MockStorageClient_StreamObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(chan error), args[2].(chan []*googlecloudstoragerehydrationreceiver.ObjectInfo), args[3].(chan struct{}))
	})
	return _c
}

func (_c *MockStorageClient_StreamObjects_Call) Return() *MockStorageClient_StreamObjects_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStorageClient_StreamObjects_Call) RunAndReturn(run func(context.Context, chan error, chan []*googlecloudstoragerehydrationreceiver.ObjectInfo, chan struct{})) *MockStorageClient_StreamObjects_Call {
	_c.Run(run)
	return _c
}

// NewMockStorageClient creates a new instance of MockStorageClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageClient {
	mock := &MockStorageClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"errors"
	"fmt"
	"sync"

	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"

	"go.opentelemetry.io/collector/component"
)

func Meter(settings component.TelemetrySettings) metric.Meter {
	return settings.MeterProvider.Meter("github.com/observiq/bindplane-otel-collector/receiver/awss3eventreceiver")
}

func Tracer(settings component.TelemetrySettings) trace.Tracer {
	return settings.TracerProvider.Tracer("github.com/observiq/bindplane-otel-collector/receiver/awss3eventreceiver")
}

// TelemetryBuilder provides an interface for components to report telemetry
// as defined in metadata and user config.
type TelemetryBuilder struct {
	meter                 metric.Meter
	mu                    sync.Mutex
	registrations         []metric.Registration
	S3eventBatchSize      metric.Int64Histogram
	S3eventFailures       metric.Int64Counter
	S3eventObjectsHandled metric.Int64Counter
}

// TelemetryBuilderOption applies changes to default builder.
type TelemetryBuilderOption interface {
	apply(*TelemetryBuilder)
}

type telemetryBuilderOptionFunc func(mb *TelemetryBuilder)

func (tbof telemetryBuilderOptionFunc) apply(mb *TelemetryBuilder) {
	tbof(mb)
}

// Shutdown unregister all registered callbacks for async instruments.
func (builder *TelemetryBuilder) Shutdown() {
	builder.mu.Lock()
	defer builder.mu.Unlock()
	for _, reg := range builder.registrations {
		err := reg.Unregister()
		if err != nil {
			fmt.Println("Error unregistering metric:", err)
		}
	}
}

// NewTelemetryBuilder provides a struct with methods to update all internal telemetry
// for a component
func NewTelemetryBuilder(settings component.TelemetrySettings, options ...TelemetryBuilderOption) (*TelemetryBuilder, error) {
	builder := TelemetryBuilder{}
	for _, op := range options {
		op.apply(&builder)
	}
	builder.meter = Meter(settings)
	var err, errs error
	builder.S3eventBatchSize, err = builder.meter.Int64Histogram(
		"otelcol_s3event.batch_size",
		metric.WithDescription("The number of logs in a batch."),
		metric.WithUnit("{logs}"),
		metric.WithExplicitBucketBoundaries([]float64{1, 5, 10, 100, 250, 500, 1000, 2500, 5000, 10000, 25000, 50000, 100000, 1e+06}...),
	)
	errs = errors.Join(errs, err)
	builder.S3eventFailures, err = builder.meter.Int64Counter(
		"otelcol_s3event.failures",
		metric.WithDescription("The number of failures encountered while processing S3 objects"),
		metric.WithUnit("{failures}"),
	)
	errs = errors.Join(errs, err)
	builder.S3eventObjectsHandled, err = builder.meter.Int64Counter(
		"otelcol_s3event.objects_handled",
		metric.WithDescription("The number of S3 objects processed by the receiver"),
		metric.WithUnit("{objects}"),
	)
	errs = errors.Join(errs, err)
	return &builder, errs
}

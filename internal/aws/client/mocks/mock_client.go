// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	client "github.com/observiq/bindplane-otel-collector/internal/aws/client"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// S3 provides a mock function with no fields
func (_m *MockClient) S3() client.S3Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for S3")
	}

	var r0 client.S3Client
	if rf, ok := ret.Get(0).(func() client.S3Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.S3Client)
		}
	}

	return r0
}

// MockClient_S3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'S3'
type MockClient_S3_Call struct {
	*mock.Call
}

// S3 is a helper method to define mock.On call
func (_e *MockClient_Expecter) S3() *MockClient_S3_Call {
	return &MockClient_S3_Call{Call: _e.mock.On("S3")}
}

func (_c *MockClient_S3_Call) Run(run func()) *MockClient_S3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_S3_Call) Return(_a0 client.S3Client) *MockClient_S3_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_S3_Call) RunAndReturn(run func() client.S3Client) *MockClient_S3_Call {
	_c.Call.Return(run)
	return _c
}

// SQS provides a mock function with no fields
func (_m *MockClient) SQS() client.SQSClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SQS")
	}

	var r0 client.SQSClient
	if rf, ok := ret.Get(0).(func() client.SQSClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SQSClient)
		}
	}

	return r0
}

// MockClient_SQS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SQS'
type MockClient_SQS_Call struct {
	*mock.Call
}

// SQS is a helper method to define mock.On call
func (_e *MockClient_Expecter) SQS() *MockClient_SQS_Call {
	return &MockClient_SQS_Call{Call: _e.mock.On("SQS")}
}

func (_c *MockClient_SQS_Call) Run(run func()) *MockClient_SQS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_SQS_Call) Return(_a0 client.SQSClient) *MockClient_SQS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_SQS_Call) RunAndReturn(run func() client.SQSClient) *MockClient_SQS_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

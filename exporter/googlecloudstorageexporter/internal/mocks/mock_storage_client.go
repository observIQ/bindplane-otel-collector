// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockStorageClient is an autogenerated mock type for the storageClient type
type mockStorageClient struct {
	mock.Mock
}

type mockStorageClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockStorageClient) EXPECT() *mockStorageClient_Expecter {
	return &mockStorageClient_Expecter{mock: &_m.Mock}
}

// BucketExists provides a mock function with given fields: ctx
func (_m *mockStorageClient) BucketExists(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BucketExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockStorageClient_BucketExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BucketExists'
type mockStorageClient_BucketExists_Call struct {
	*mock.Call
}

// BucketExists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockStorageClient_Expecter) BucketExists(ctx interface{}) *mockStorageClient_BucketExists_Call {
	return &mockStorageClient_BucketExists_Call{Call: _e.mock.On("BucketExists", ctx)}
}

func (_c *mockStorageClient_BucketExists_Call) Run(run func(ctx context.Context)) *mockStorageClient_BucketExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockStorageClient_BucketExists_Call) Return(_a0 bool, _a1 error) *mockStorageClient_BucketExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockStorageClient_BucketExists_Call) RunAndReturn(run func(context.Context) (bool, error)) *mockStorageClient_BucketExists_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBucket provides a mock function with given fields: ctx
func (_m *mockStorageClient) CreateBucket(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateBucket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockStorageClient_CreateBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBucket'
type mockStorageClient_CreateBucket_Call struct {
	*mock.Call
}

// CreateBucket is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockStorageClient_Expecter) CreateBucket(ctx interface{}) *mockStorageClient_CreateBucket_Call {
	return &mockStorageClient_CreateBucket_Call{Call: _e.mock.On("CreateBucket", ctx)}
}

func (_c *mockStorageClient_CreateBucket_Call) Run(run func(ctx context.Context)) *mockStorageClient_CreateBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockStorageClient_CreateBucket_Call) Return(_a0 error) *mockStorageClient_CreateBucket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockStorageClient_CreateBucket_Call) RunAndReturn(run func(context.Context) error) *mockStorageClient_CreateBucket_Call {
	_c.Call.Return(run)
	return _c
}

// UploadObject provides a mock function with given fields: ctx, objectName, buffer
func (_m *mockStorageClient) UploadObject(ctx context.Context, objectName string, buffer []byte) error {
	ret := _m.Called(ctx, objectName, buffer)

	if len(ret) == 0 {
		panic("no return value specified for UploadObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, objectName, buffer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockStorageClient_UploadObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadObject'
type mockStorageClient_UploadObject_Call struct {
	*mock.Call
}

// UploadObject is a helper method to define mock.On call
//   - ctx context.Context
//   - objectName string
//   - buffer []byte
func (_e *mockStorageClient_Expecter) UploadObject(ctx interface{}, objectName interface{}, buffer interface{}) *mockStorageClient_UploadObject_Call {
	return &mockStorageClient_UploadObject_Call{Call: _e.mock.On("UploadObject", ctx, objectName, buffer)}
}

func (_c *mockStorageClient_UploadObject_Call) Run(run func(ctx context.Context, objectName string, buffer []byte)) *mockStorageClient_UploadObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *mockStorageClient_UploadObject_Call) Return(_a0 error) *mockStorageClient_UploadObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockStorageClient_UploadObject_Call) RunAndReturn(run func(context.Context, string, []byte) error) *mockStorageClient_UploadObject_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorageClient creates a new instance of mockStorageClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockStorageClient {
	mock := &mockStorageClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
